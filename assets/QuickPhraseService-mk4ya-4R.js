import{p as r}from"./index-5OteHtpV.js";class h{static async getAll(){return await r.getAllQuickPhrases()}static async get(t){return await r.getQuickPhrase(t)}static async add(t){return await r.addQuickPhrase(t)}static async update(t,s){return await r.updateQuickPhrase(t,s)}static async delete(t){return await r.deleteQuickPhrase(t)}static async updateOrder(t){return await r.updateQuickPhrasesOrder(t)}static getAssistantPhrases(t){return t?.regularPhrases||[]}static async updateAssistantPhrases(t,s,a){const e={...t,regularPhrases:s};await a(e)}static async addAssistantPhrase(t,s,a){const e=Date.now(),i={id:crypto.randomUUID(),title:s.title,content:s.content,createdAt:e,updatedAt:e,order:0},n=t?.regularPhrases||[],c=[i,...n];return await this.updateAssistantPhrases(t,c,a),i}static async deleteAssistantPhrase(t,s,a){const i=(t?.regularPhrases||[]).filter(n=>n.id!==s);await this.updateAssistantPhrases(t,i,a)}static async updateAssistantPhrase(t,s,a,e){const n=(t?.regularPhrases||[]).map(c=>c.id===s?{...c,...a,updatedAt:Date.now()}:c);await this.updateAssistantPhrases(t,n,e)}}export{h as Q};
