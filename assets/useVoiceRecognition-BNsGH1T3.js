import{r as t}from"./index-BFQp9Otg.js";import{v as n}from"./VoiceRecognitionService-DDVTm04u.js";const w=()=>{const[l,u]=t.useState(n.getIsListening()),[p,g]=t.useState(""),[h,r]=t.useState("unknown"),[R,i]=t.useState(null);t.useEffect(()=>{const e=n,o=s=>{g(s)},c=s=>{u(s==="started"),s==="stopped"&&g("")},k=s=>{i(s),u(!1)};return e.setPartialResultsCallback(o),e.setListeningStateCallback(c),e.setErrorCallback(k),e.checkPermissions().then(s=>{r(s.speechRecognition)}),()=>{}},[]);const a=t.useCallback(async()=>{const e=await n.checkPermissions();if(r(e.speechRecognition),e.speechRecognition!=="granted"){const o=await n.requestPermissions();return r(o.speechRecognition),o.speechRecognition==="granted"}return e.speechRecognition==="granted"},[]),m=t.useCallback(async e=>{if(i(null),!await a()){i(new Error("Speech recognition permission not granted."));return}try{await n.startRecognition(e)}catch(c){i(c)}},[a]),S=t.useCallback(async()=>{try{await n.stopRecognition()}catch(e){i(e)}},[]),d=t.useCallback(async()=>await n.getSupportedLanguages(),[]);return{isListening:l,recognitionText:p,permissionStatus:h,error:R,startRecognition:m,stopRecognition:S,checkAndRequestPermissions:a,getSupportedLanguages:d}};export{w as u};
